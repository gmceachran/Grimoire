// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(uuid())
  email            String   @unique
  password_hash    String
  display_name     String?
  status           UserStatus @default(PENDING)
  email_verified_at DateTime?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  sessions Session[]
  user_roles UserRole[]
  verification_tokens VerificationToken[]
  libraries Library[]
  books Book[]
  chapters Chapter[]
  world_entries WorldEntry[]
  maps Map[]
  map_pins MapPin[]
  timelines Timeline[]
  timeline_events TimelineEvent[]

  @@map("users")
}

model Session {
  id           String    @id @default(uuid())
  user_id      String
  token_hash   String    @unique
  expires_at   DateTime
  created_at   DateTime  @default(now())
  last_used_at DateTime?
  revoked_at   DateTime?
  user_agent   String?
  ip_address   String?
  device_label String?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  created_at  DateTime @default(now())

  user_roles UserRole[]

  @@map("roles")
}

model UserRole {
  id      String @id @default(uuid())
  user_id String
  role_id String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([user_id, role_id])
  @@map("user_roles")
}

model VerificationToken {
  id        String    @id @default(uuid())
  user_id   String
  token     String    @unique
  purpose   TokenPurpose
  expires_at DateTime
  consumed_at DateTime?
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("verification_tokens")
}

model Library {
  id          String   @id @default(uuid())
  name        String
  description String?
  user_id     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  books Book[]
  maps Map[]
  timelines Timeline[]

  @@map("libraries")
}

model Book {
  id          String    @id @default(uuid())
  title       String
  description String?
  library_id  String
  user_id     String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  library Library @relation(fields: [library_id], references: [id], onDelete: Cascade)
  chapters Chapter[]
  maps Map[]
  timelines Timeline[]
  
  @@map("books")
}

model Chapter {
  id          String   @id @default(uuid())
  title       String
  content     String?
  book_id     String
  user_id     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  book Book @relation(fields: [book_id], references: [id], onDelete: Cascade)
  world_entries WorldEntry[]
  maps Map[]
  timelines Timeline[]

  @@map("chapters")
}

model WorldEntry {
  id          String   @id @default(uuid())
  title       String
  content     String?
  type        EntryType
  chapter_id  String?
  user_id     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  chapter Chapter? @relation(fields: [chapter_id], references: [id], onDelete: SetNull)

  @@index([user_id, created_at])
  @@map("world_entries")
}

model Map {
  id          String   @id @default(uuid())
  title       String
  description String?
  image_url   String?
  library_id  String?
  book_id     String?
  chapter_id  String?
  user_id     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  library Library? @relation(fields: [library_id], references: [id], onDelete: SetNull)
  book Book? @relation(fields: [book_id], references: [id], onDelete: SetNull)
  chapter Chapter? @relation(fields: [chapter_id], references: [id], onDelete: SetNull)
  map_pins MapPin[]

  @@map("maps")
}

model MapPin {
  id          String   @id @default(uuid())
  title       String
  description String?
  x_coordinate Float
  y_coordinate Float
  map_id      String
  user_id     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  map Map @relation(fields: [map_id], references: [id], onDelete: Cascade)

  @@map("map_pins")
}

model Timeline {
  id          String   @id @default(uuid())
  title       String
  description String?
  library_id  String?
  book_id     String?
  chapter_id  String?
  user_id     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  library Library? @relation(fields: [library_id], references: [id], onDelete: SetNull)
  book Book? @relation(fields: [book_id], references: [id], onDelete: SetNull)
  chapter Chapter? @relation(fields: [chapter_id], references: [id], onDelete: SetNull)
  timeline_events TimelineEvent[]

  @@map("timelines")
}

model TimelineEvent {
  id          String   @id @default(uuid())
  title       String
  description String?
  event_date  DateTime?
  timeline_id String
  user_id     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  timeline Timeline @relation(fields: [timeline_id], references: [id], onDelete: Cascade)

  @@map("timeline_events")
}

enum TokenPurpose {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

enum EntryType {
  CHARACTER
  PLACE
  OBJECT
  EVENT
  CONCEPT
  OTHER
}

enum UserStatus {
  PENDING
  VERIFIED
  SUSPENDED
  DELETED
}